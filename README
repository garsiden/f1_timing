The timing PDFs from the FIA are normally available very quickly after each
session or the race but the link can be removed within a few days if there are
back to back races. It's a good idea to back up the PDFs as the database can
be re-created from them and the document names will not change from season to
season and there can be a danger of overwriting them.

When updating the database, if there are existing records for the source
documents they will be deleted first. This is done within a transactions so
the delete will only be successful if all the new records are added.

The database isn't fully relational or normalized, e.g., the drivers' names
are included in the race_fastest_lap, as this minimizes the dependencies. Only
the documents of interest need be added to the database and this can be done
in any order. The driver tables for each practice session, qualifying and the
race are updated at the same time as the relevant lap-time table.

Not all the PDFs can be processed; for some races the race-grid and
qualifying-classification documents are facsimiles of the time sheets signed
by the stewards from which the text cannot be extracted.

SQLite3 has been used for the database as it's small and easy to install but
it is not ideal for accurate time arithmetic. Time is expressed as a decimal
value, e.g., 0.5 is 12 hours or midday, so this together with rounding errors
in computer floating number calculations means that there maybe small errors
when summing lap times with thousandths of a second. It is possible to create
an aggregate extension using the SQLite C API but this would need to be
compiled separately for each platform. Alternatively it would be possible to
up size to another RDMS such as PostgreSQL which has better support for time
arithmetic.

There is a SQL query to calculate the cumulative difference between each
driver's lap time and the race winner's average lap time. It is only for one
race and is very slow so it would be better in a RDMS with stored procedures
and windowing functions, such as PostgreSQL 9. Alternatively further analysis
can be carried out with a spreadsheet using the export function of the Perl
script or from the Firefox add-in SQLite Manager.
